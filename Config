#!/bin/sh
#
# Configuration script for Stats.
#
# Denora (c) 2004-2014 Denora Team
# Contact us at info@denorastats.org
#
# This program is free but copyrighted software; see the file COPYING for
# details.
#
# Based on the original code of Anope by Anope Team.
# Based on the original code of Thales by Lucas.
#
# 
#
###########################################################################


###########################################################################
# Functions
###########################################################################

echo2 () {
	$ECHO2 "$*$ECHO2SUF"	# these are defined later
}

Show_Banner () {
	if [ -f .BANNER ] ; then
		. ./version.in
		clear
		cat .BANNER | sed "s/CURVER/$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH $VERSION_EXTRA/" | sed "s/CURSHORTVER/$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH/" | more
	fi
	echo ""
	echo "Beginning Stats configuration."
	echo ""
}

Run_Config () {
	WITH_BIN=""
	WITH_DATA=""
	WITH_RUN=""
	WITH_PERM=""
	WITH_MYSQL_BT=""
   
	if [ "$BINDEST" != "" ] ; then
		WITH_BIN=" --with-bindir=$BINDEST"
		WITH_DATA=" --with-datadir=$DATDEST"
	fi
	
	if [ "$DATDEST" != "" ] ; then
		WITH_DATA=" --with-datadir=$DATDEST"
	fi
	
	if [ "$RUNGROUP" != "" ] ; then
		WITH_RUN="  --with-rungroup=$RUNGROUP"
	fi
	
	if [ "$UMASK" != "" ] ; then
		WITH_PERM=" --with-permissions=$UMASK"
	fi

	touch autoconf/install-sh
	echo "Generating Configuration file and Makefiles, this may take a moment"
	autoconf 
	echo "./configure $WITH_BIN $WITH_DATA $WITH_RUN $WITH_PERM"
	
	./configure $WITH_BIN $WITH_DATA $WITH_RUN $WITH_PERM
	if [ "$REGSCRIPT" = "yes" ] ; then
		src/bin/register
	fi
}

exists () {			 # because some shells don't have test -e
	if [ -f $1 -o -d $1 -o -p $1 -o -c $1 -o -b $1 ] ; then
		return 0
	else
		return 1
	fi
}

Load_Cache () {
	if [ -f config.cache -a -r config.cache -a ! "$NOCACHE" ] ; then

		echo "Using defaults from config.cache. To ignore, rm config.cache"
		. ./config.cache


		CAN_QUICK="yes"
		if [ "$BINDEST" = "" ] ; then
			BINDEST=$HOME/stats
		fi
		if [ "$DATDEST" = "" ] ; then
			DATDEST=$HOME/stats
		fi
		if [ "$REGSCRIPT" = "" ] ; then
			REGSCRIPT="no"
		fi
	else
		CAN_QUICK="no"
	fi
}

###########################################################################
# Init values
###########################################################################

BINDEST=$HOME/stats
DATDEST=$HOME/stats
RUNGROUP=
UMASK=
NOCACHE=""
SHOW_INTRO="yes"
CAN_QUICK="no"
REGSCRIPT="no"
MYSQL_BT="no"
SSL="yes"

###########################################################################
# Check out the options
###########################################################################
while [ $# -ge 1 ] ; do
	if [ $1 = "--help" ] ; then
		echo "Config utility for Denora"
		echo "-----------------------------"
		echo "Syntax:	./Config [options]"
		echo "-nocache	Ignore settings saved in config.cache"
		echo "-nointro	Skip intro (release notes, etc)"
		echo "-quick	Skip questions, go straight to configure"
		exit 0
	elif [ $1 = "-nocache" ] ; then
		NOCACHE="1"
	elif [ $1 = "-nointro" ] ; then
		SHOW_INTRO="no"
	elif [ $1 = "-quick" -o $1 = "-q" ] ; then
		Load_Cache
		if [ $CAN_QUICK = "yes" ] ; then
			Run_Config
		else
			echo "Can't find cache file, aborting..."
		fi
		exit 0
	fi
	shift 1
done

###########################################################################
# Load the cache
###########################################################################
if [ ! "$NOCACHE" ] ; then
	Load_Cache
fi

###########################################################################
# Show the banner
###########################################################################
if [ $SHOW_INTRO = "yes" ] ; then
	Show_Banner
else
	echo ""
fi

###########################################################################
# Ask the user anything we need to know ahead of time.
###########################################################################
export ok INPUT

####

if [ "`id -u`" = "0" ] ; then
	echo "ERROR: You can NOT run Config as root, nor run Denora as root"
	echo ""
	exit 0
fi


# need this file for configure
touch install-sh

ok=0
echo "Note: press Return for the default, or enter a new value."
echo "In what directory do you want the binaries to be installed?"
while [ $ok -lt 1 ] ; do
	echo "[$BINDEST] "
	if read INPUT ; then : ; else echo "" ; exit 1 ; fi
	if [ ! "$INPUT" ] ; then
		INPUT=$BINDEST
	fi
	if [ ! -d "$INPUT" ] ; then
		if exists "$INPUT" ; then
			echo "$INPUT exists, but is not a directory!"
		else
			echo "$INPUT does not exist.  Create it?"
			echo "[y] "
			read YN
			if [ "$YN" != "n" ] ; then
				if mkdir -p $INPUT ; then
					ok=1
				fi
			fi
		fi
	elif exists "$INPUT/include/denora.h" ; then
		echo "You cannot use the stats source directory as a target directory."
	else
		ok=1
	fi
done
BINDEST=$INPUT
DATDEST=$INPUT
echo ""

####

ok=0
echo "Where do you want the data files to be installed?"
while [ $ok -lt 1 ] ; do
	echo "[$DATDEST] "
	if read INPUT ; then : ; else echo "" ; exit 1 ; fi
	if [ ! "$INPUT" ] ; then
		INPUT=$DATDEST
	fi
	if [ ! -d "$INPUT" ] ; then
		if exists "$INPUT" ; then
			echo "$INPUT exists, but is not a directory!"
		else
			echo "$INPUT does not exist.  Create it?"
			echo "[y] "
			read YN
			if [ "$YN" != "n" ] ; then
				if mkdir -p $INPUT ; then
					ok=1
				fi
			fi
		fi
	elif exists "$INPUT/include/denora.h" ; then
		echo "You cannot use the stats source directory as a target directory."
	else
		ok=1
	fi
done
DATDEST=$INPUT
echo ""

####


OLD_RUNGROUP="$RUNGROUP"
if [ "$RUNGROUP" ] ; then
	echo "Which group should all Stats data files be owned by?  (If Stats"
	echo "should not force files to be owned by a particular group, type "\"none\"
	echo "(without the quotes) and press Return.)"
else
	echo "Which group should all Stats data files be owned by?  (If Stats"
	echo "should not force files to be owned by a particular group, just press"
	echo "Return.)"
fi
echo "[$RUNGROUP] "
if read INPUT ; then : ; else echo "" ; exit 1 ; fi
if [ "$INPUT" ] ; then
	lcfile=`echo $INPUT | tr A-Z a-z`
	if [ "$INPUT" = "none" ] ; then
		RUNGROUP=""
	elif [ $lcfile = "root" ] ; then
		RUNGROUP=""
		echo "Can not use root group to run denora"
		exit 0;
	else
		RUNGROUP="$INPUT"
	fi
fi
echo ""

####

if [ ! "$UMASK" -o "$RUNGROUP" != "$OLD_RUNGROUP" ] ; then
	if [ "$RUNGROUP" ] ; then
		UMASK=007
	else
		UMASK=077
	fi
fi

ok=0
echo "What should the default umask for data files be (in octal)?"
echo "(077 = only accessible by owner; 007 = accessible by owner and group)"
while [ $ok -lt 1 ] ; do
	echo "[$UMASK] "
	if read INPUT ; then : ; else echo "" ; exit 1 ; fi
	if [ ! "$INPUT" ] ; then
		INPUT=$UMASK
	fi
	if [ "$INPUT" = "000" ] ; then
		echo "Invalid UMASK please enter a valid Umask";
	elif [ `echo "$INPUT" | grep -c '[^0-7]'` -gt 0 ] ; then
		echo "$UMASK is not a valid octal number!"
	else
		if [ "`echo $INPUT | cut -c1`" != "0" ] ; then
			INPUT=0$INPUT
		fi
		ok=1
	fi
done
UMASK=$INPUT
echo ""

####

ok=0
DEF=no
echo "Would you like to register your network with Denora?"
echo "Doing this will allow us to better focus our project"
while [ $ok -lt 1 ] ; do
	echo "[$REGSCRIPT] "
	if read INPUT ; then : ; else echo "" ; exit 1 ; fi
	if [ ! "$INPUT" ] ; then
		INPUT=$REGSCRIPT
	fi
	case $INPUT in
		n*|N*)
			REGSCRIPT="no"
			ok=1
			;;
		y*|Y*)
			REGSCRIPT="yes"
			ok=1
			;;
		*)
			echo "Please enter 'yes' or 'no'."
			;;
	esac
done
echo ""

####


################################################################################
# Store values
################################################################################
echo "Saving configuration results in config.cache... "

cat <<EOT >config.cache
BINDEST="$BINDEST"
DATDEST="$DATDEST"
RUNGROUP="$RUNGROUP"
UMASK=$UMASK
MYSQL_BT="$MYSQL_BT"
REGSCRIPT="$REGSCRIPT"
EOT
echo "done."

###########################################################################
# Let's call the configure script
###########################################################################
Run_Config

# EOF
