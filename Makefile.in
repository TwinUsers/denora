# Makefile for Denora.
#
# (c) 2004-2014 Denora Team
# Contact us at info@denorastats.org
#
# Please read COPYING and README for further details.
#
# Based on the original code of Anope by Anope Team.
# Based on the original code of Thales by Lucas.
#
# 
#  

CCDV=@CCDV@
CC=$(CCDV)@CC@
CC2=@CC@
INCLUDEDIR=../include 
DENORALIBS=@DENORALIBS@
BASEOPT=-O2
CFLAGS=@CFLAGS@
OPCFLAGS=@OPCFLAGS@
STRICT=@STRICT@
ANSI=-Wall -ansi -pedantic
PROFILE=-pg
LDPROFILE=
SHELL=/bin/sh
SUBDIRS=src
LIBDIRS=lib/execinfo lib/geoip lib/sqlite3
BINDEST=@BINDEST@
DATDEST=@DATDEST@
INSTALL=@INSTALL@
RM=@RM@
CP=@CP@
TOUCH=@TOUCH@
MODULE_PATH=@MODULE_PATH@
MYSQL=@MYSQL@
MYSQL_CLIENT_LIBS=@MYSQL_CLIENT_LIBS@
LDFLAGS=@LDFLAGS@
RUNGROUP=@RUNGROUP@
SHARED=@SHARED@
RDYNAMNIC=@RDYNAMNIC@
MODULEFLAGS=@MODULEFLAGS@

all: libs language headers build core encmod protocols modules sqlmod end_msg
verbose: language_v headers_v build_v core_v encmod_v protocols_v modules_v
strict: strict_language headers strict_build strict_core strict_encmod strict_protocols strict_modules
ansi: ansi_language headers ansi_build ansi_core ansi_encmod ansi_protocols ansi_modules
profile: language headers profile_build profile_core profile_encmod profile_protocols profile_modules
optimized: language headers optimized_build optimized_core optimized_encmod optimized_protocols optimized_modules

MAKEARGS = 'CFLAGS=${CFLAGS}' 'CC=${CC}' 'DENORALIBS=${DENORALIBS}' \
	   'LDFLAGS=${LDFLAGS}' 'BINDEST=${BINDEST}' 'INSTALL=${INSTALL}' \
           'INCLUDEDIR=${INCLUDEDIR}' 'RM=${RM}' 'CP=${CP}' \
      	   'TOUCH=${TOUCH}' 'SHELL=${SHELL}' 'DATDEST=${DATDEST}' \
  	   'RUNGROUP=${RUNGROUP}' 'MODULE_PATH=${MODULE_PATH}'\
	   'SHARED=${SHARED}' 'MODULEFLAGS=${MODULEFLAGS}' 'RDYNAMNIC=${RDYNAMNIC}'

MAKEARGS_V = 'CFLAGS=${CFLAGS}' 'CC=${CC2}' 'DENORALIBS=${DENORALIBS}' \
	   'LDFLAGS=${LDFLAGS}' 'BINDEST=${BINDEST}' 'INSTALL=${INSTALL}' \
           'INCLUDEDIR=${INCLUDEDIR}' 'RM=${RM}' 'CP=${CP}' \
      	   'TOUCH=${TOUCH}' 'SHELL=${SHELL}' 'DATDEST=${DATDEST}' \
  	   'RUNGROUP=${RUNGROUP}' 'MODULE_PATH=${MODULE_PATH}'\
	   'SHARED=${SHARED}' 'MODULEFLAGS=${MODULEFLAGS}' 'RDYNAMNIC=${RDYNAMNIC}'


build:
	@for i in $(SUBDIRS); do \
            echo "*** Building $$i";\
            ( cd $$i; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all; ) \
        done

build_v:
	for i in $(SUBDIRS); do \
            echo "*** Building $$i";\
            ( cd $$i; ${MAKE} V=1 ${MAKEARGS_V} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all; ) \
        done

libs_build:
	@for i in $(LIBDIRS); do \
            echo "*** Building $$i";\
            ( cd $$i; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all; ) \
        done
	(cd lib/geoip ; ${MAKE} ${MAKEARGS} install)
	(cd lib/execinfo ; ${MAKE} ${MAKEARGS} install)
	(cd lib/sqlite3 ; ${MAKE} ${MAKEARGS} install)


libs_clean:
	@for i in $(LIBDIRS); do \
            ( cd $$i; ${MAKE} -s clean; ) \
        done

libs_distclean:
	@for i in $(LIBDIRS); do \
            ( cd $$i; ${MAKE} distclean; ) \
        done

libs: libs_build

end_msg:
	@echo "Denora has completed compiling the source code, to install type";
	@echo "		 (g)make install";
	@echo "Remember to read the documatation and create your denora.xml config file";


strict_build:  
	@for i in $(SUBDIRS); do \
            echo "*** Strict Building $$i";\
            ( cd $$i; ${MAKE}  -s  ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(STRICT)' all; ) \
        done

optimized_build:  
	@for i in $(SUBDIRS); do \
            echo "*** Strict Building $$i";\
            ( cd $$i; ${MAKE} -s  ${MAKEARGS} 'CFLAGS=${CFLAGS} ${OPCFLAGS}' all; ) \
        done

ansi_build:  
	@for i in $(SUBDIRS); do \
            echo "*** Strict Building $$i";\
            ( cd $$i; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(ANSI)' all; ) \
        done

profile_build:
	@for i in $(SUBDIRS); do \
            echo "*** Strict Building $$i";\
            ( cd $$i; ${MAKE}  -s  ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(PROFILE)' 'LDFLAGS=${LDFLAGS} ${PROFILE}' all; ) \
        done

modules: build
	@echo "*** Building Extra Modules";
	@(cd src/modules ; ./configure ; ${MAKE}  -s  ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all; )
	@echo "*** All done";

encmod: build
	@echo "*** Building Encryption Modules";
	@(cd src/encmod ; ./configure ; ${MAKE}  -s  ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all; )
	@echo "*** All done";

sqlmod: build
	@echo "*** Building SQL Database Modules";
	@(cd src/sqlmods ; ./configure ; ${MAKE}  -s  ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all; )
	@echo "*** All done";

core: build 
	@echo "*** Building Core modules";
	@(cd src/ ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' core; )

profile_core: build 
	@echo "*** Building Core modules";
	@(cd src/ ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' 'PROFILE=${PROFILE}' core; )

strict_core: strict_build 
	@echo "*** Building Core modules";
	@(cd src/core ; ./configure ; ${MAKE} -s  ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(STRICT)' all; )

optimized_core: optimized_build
	@echo "*** Building Core modules";
	@(cd src/core ; ./configure ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(CFLAGS) $(OPCFLAGS)' all; )

ansi_core: ansi_build
	@echo "*** Building Core modules";
	@(cd src/core ; ./configure ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(ANSI)' all; )

strict_modules: strict_build
	@(cd src/modules ; ./configure ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(STRICT)' all; )
	@echo "*** All done, now (g)make install to install Denora/Modules";

ansi_modules: ansi_build
	@(cd src/modules ; ./configure ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(ANSI)' all; )
	@echo "*** All done, now (g)make install to install Denora/Modules";

ansi_encmod: ansi_build
	@echo "*** Building Encryption Modules";
	@(cd src/encmod ; ./configure ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(ANSI)' all; )
	@echo "*** All done";


optimized_modules: optimized_build
	@(cd src/modules ; ./configure ; ${MAKE}  -s ${MAKEARGS} 'CFLAGS=$(CFLAGS) $(OPCFLAGS)' all; )
	@echo "*** All done, now (g)make install to install Denora/Modules";

profile_modules: profile_build
	@(cd src/modules ; ./configure ; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} ${PROFILE}' 'PROFILE=${PROFILE}' all; )
	@echo "*** All done, now (g)make install to install Denora/Modules";

protocols: build
	@echo "*** Compiling Denora's IRCD Protocols";
	@(cd src/protocol ; ./configure ; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all; )
	@echo "*** All done, with Denora/Protocols";

strict_protocols: strict_build
	@(cd src/protocol ; ./configure ; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(STRICT)' all; )
	@echo "*** All done, now (g)make install to install Denora/Protocols";

optimized_protocols: optimized_build
	@(cd src/protocol ; ./configure ; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(CFLAGS) $(OPCFLAGS)' all; )
	@echo "*** All done, now (g)make install to install Denora/Protocols";

ansi_protocols: ansi_build
	@(cd src/protocol ; ./configure ; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(ANSI)' all; )
	@echo "*** All done, now (g)make install to install Denora/Protocols";

profile_protocols: profile_build
	@(cd src/protocol ; ./configure ; ${MAKE} -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} ${PROFILE}' 'PROFILE=${PROFILE}' all; )
	@echo "*** All done, now (g)make install to install Denora/Protocols";


language:
	@echo "*** Generating Language Files";
	@(cd lang ; $(MAKE) -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all language.h ; cp language.h ../include/)
	@echo "*** All done with Language files";

language_v:
	@echo "*** Generating Language Files";
	(cd lang ; $(MAKE) V=1 ${MAKEARGS_V} 'CFLAGS=$(BASEOPT) ${CFLAGS}' all language.h ; cp language.h ../include/)
	@echo "*** All done with Language files";

strict_language:
	@echo "*** Generating Language Files";
	@(cd lang ; $(MAKE) -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(STRICT)' all language.h ; cp language.h ../include/)
	@echo "*** All done with Language files";

ansi_language:
	@echo "*** Generating Language Files";
	@(cd lang ; $(MAKE) -s ${MAKEARGS} 'CFLAGS=$(BASEOPT) ${CFLAGS} $(ANSI)' all language.h ; cp language.h ../include/)
	@echo "*** All done with Language files";

headers:
	@echo "*** Generating Required Header Files";
	@(cd include ; ${MAKE} -s ${MAKEARGS} )
	@echo "*** All done with headers";

headers_v:
	@echo "*** Generating Required Header Files";
	(cd include ; ${MAKE} V=1 ${MAKEARGS_V} )
	@echo "*** All done with headers";

clean: libs_clean
	(cd lang ; ${MAKE} -s clean )
	(cd include ; ${MAKE} -s clean )
	(cd src ; ${MAKE} -s clean )

distclean: libs_distclean
	(cd lang ; ${MAKE} -s distclean )
	(cd include ; ${MAKE} -s distclean )
	(cd src ; ${MAKE} -s distclean )
	rm -f config.log config.status config.cache Makefile install-sh src/bin/denorarc src/bin/geoipupd ccdv

recompile:
	cp config.cache config.bak
	(${MAKE} distclean)
	cp config.bak config.cache
	./Config -quick
	(${MAKE} strict && ${MAKE} install)

install: DUMMY
	(cd src ; ${MAKE} ${MAKEARGS} install)


DUMMY:
